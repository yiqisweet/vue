/** * Created by Randy on 2017/5/15. *///常用断言 toEqual 深相等describe("常用断言",function(){    "use strict";    beforeEach(function(){        console.log('测试开始前准备工作')    });    //toEqual 深相等，对于对象来说，会比较对象的每个属性。对于数组来说，会比较数组中每个元素。     //对于对象，引用相等。对于值，值相等。    it("toEqual深相等断言值",function(){        var a = 12;        expect(a).toEqual(12);    });    it("toEqual深相等断言引用",function(){        var foo = {            a :　12,            b : 34        };        var bar = {            a :12,            b : 34        };        expect(foo).toEqual(bar);    });    it('toBeTruthy是否为真断言',function(){        var a = 0        var b = 1; //null "" 0 false 皆为不是真        expect(b).toBeTruthy();  //b是否为true        expect(a).not.toBeTruthy(); // a是否为false    });    it('toBeFalsy是否为假断言',function(){        var a = 0        var b = 1;        expect(a).toBeFalsy();        expect(b).not.toBeFalsy();    })    it("toBeDefined是否定义过。", function() {        var tape = {            play : "",            pause : "",            stop : "",            rewind : ""        }        expect(tape.play).toBeDefined();  //定义过的不报错        expect(tape.pause).toBeDefined();        expect(tape.stop).toBeDefined();        expect(tape.rewind).toBeDefined();    });    it("toBeUndefined是否 没 定义过。", function() {        var tape = {            pause : "",            stop : "",            rewind : ""        }        expect(tape.pause).not.toBeUndefined(); // 没定义的反向 定义过不报错        expect(tape.play).toBeUndefined(); //没定义的不报错    });    it("toBeNull是否为空", function() {        var a = null;        var foo = "foo";        expect(null).toBeNull();        expect(a).toBeNull();        expect(foo).not.toBeNull();    });    it("toBeGreaterThan是否比参数大", function() {        var pi = 3.1415926,            e = 2.78;        expect(pi).toBeGreaterThan(e);        expect(e).not.toBeGreaterThan(pi);    });    it("toBeLessThan是否比参数小", function() {        var pi = 3.1415926,            e = 2.78;        expect(e).toBeLessThan(pi);        expect(pi).not.toBeLessThan(e);    });    afterEach(function(){        console.log('测试结束后工作');    })})